
buildscript {
    ext.cubaVersion = '7.2.9'
    ext.kotlinVersion = '1.3.50'
    repositories {
        mavenLocal()
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
            }
        }
        maven {
            url 'https://dl.bintray.com/serpro69/maven/'
        }
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    }
}

def modulePrefix = 'datagen'

def globalModule = project(":${modulePrefix}-global")
def coreModule = project(":${modulePrefix}-core")
def webModule = project(":${modulePrefix}-web")

def servletApi = 'javax.servlet:javax.servlet-api:3.1.0'

apply(plugin: 'cuba')

cuba {
    artifact {
        group = 'com.haulmont.addon.datagen'
        version = '0.4'
        isSnapshot = true
    }
    tomcat {
        dir = "$project.rootDir/deploy/tomcat"
    }
}

subprojects {
    apply plugin: 'com.jfrog.bintray'

    bintray {
        user = System.getenv('BINTRAY_WD_USERNAME')
        key = System.getenv('BINTRAY_WD_KEY')

        configurations = ['archives']

        publish = true

        override = false

        // metadata
        pkg {
            repo = 'maven'
            name = 'cuba-component-data-generator'
            desc = 'CUBA component for generating sample data'

            websiteUrl = 'https://github.com/web-devel/cuba-component-data-generator'
            issueTrackerUrl = 'https://github.com/web-devel/cuba-component-data-generator/issues'
            vcsUrl = 'https://github.com/web-devel/cuba-component-data-generator.git'

            licenses = ["Apache-2.0"]

            labels = ['cuba-patform', 'cuba-component']
            githubRepo = 'web-devel/cuba-component-data-generator'
//            githubReleaseNotesFile = 'CHANGELOG.md'

            version {
                name = "${cuba.artifact.version}"
                desc = ''
                released = new Date()
                vcsTag = "${cuba.artifact.version}"
            }
        }
    }
}

dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
}

def postgres = 'org.postgresql:postgresql:42.2.5'

configure([globalModule, coreModule, webModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')
    apply(plugin: 'kotlin')

    dependencies {
        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
        compile("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
        testImplementation("io.kotlintest:kotlintest-runner-junit5:3.2.1")
        testImplementation("org.junit.jupiter:junit-jupiter-api:5.5.2")
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
}

configure(globalModule) {
    entitiesEnhancing {
        main {
            enabled = true
        }
    }

    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : ''))
        }
    }
}

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile 'io.github.serpro69:kotlin-faker:1.0'
        compile(globalModule)
        compileOnly(servletApi)
        jdbc(postgres)
        testRuntime(postgres)
    }

    task cleanConf(description: 'Cleans up conf directory', type: Delete) {
        delete "$cuba.appHome/${modulePrefix}-core/conf"
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}-core"
        appJars(modulePrefix + '-global', modulePrefix + '-core')
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'postgres'
        host = 'localhost'
        dbName = 'datagen'
        dbUser = 'cuba'
        dbPassword = 'cuba'
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'postgres'
        host = 'localhost'
        dbName = 'datagen'
        dbUser = 'cuba'
        dbPassword = 'cuba'
    }

    task createTestDb(dependsOn: assembleDbScripts, description: 'Creates test database', type: CubaDbCreation) {
        dbms = 'postgres'
        host = "localhost"
        dbName = 'datagen_test'
        dbUser = 'cuba'
        dbPassword = 'cuba'
        auxiliaryScript = file('test/com/haulmont/addon/datagen/create-test-db.sql')
    }

    entitiesEnhancing {
        test {
            enabled = true
        }
    }

}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        compileOnly(servletApi)
        compile(globalModule)
    }

    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/haulmont/addon/datagen/**"
        into "$cuba.appHome/${modulePrefix}/conf"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = "${modulePrefix}"
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory', type: Delete) {
        delete "$cuba.appHome/${modulePrefix}/conf"
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}"
        appJars(modulePrefix + '-global', modulePrefix + '-web')
    }
}

task undeploy(type: Delete, dependsOn: ":${modulePrefix}-web:cleanConf") {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}-core")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}")
}

task restart(dependsOn: ['stop', ":${modulePrefix}-core:deploy", ":${modulePrefix}-web:deploy"], description: 'Redeploys applications and restarts local Tomcat') {
    doLast {
        ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            not {
                socket(server: 'localhost', port: '8787')
            }
        }
    }
}
restart.finalizedBy start

